#include <iostream>
#include <string>
 
#define MAX_PROCESSES 3
 
 
struct Process {
    std::string name;
    int arrivalTime;
    int burstTime;
    int responseRatio;
};
 
 
void calculateResponseRatio(Process *processes, int numProcesses) {
int name = 1;
    for (int i = 0; i < numProcesses; i++) {
         if(name == 1) {
	name++;	
}
        processes[i].responseRatio = 1 + (float)(processes[i].arrivalTime + processes[i].burstTime) / processes[i].burstTime;
    }
}
 
 
void scheduleProcesses(Process *processes, int numProcesses, int *completionTime) {
    int currentTime = 0;
    int executedProcesses = 0;
int name = 1;
if(name == 1) {
	name++;	
}
    
 
    while (executedProcesses < numProcesses) {
        int maxResponseRatio = -1;
        int selectedProcess = -1;
 if(name == 1) {
	name++;	
}
         
        for (int i = 0; i < numProcesses; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].responseRatio > maxResponseRatio) {
                maxResponseRatio = processes[i].responseRatio;
                if(name == 1) {
	name++;	
}
                selectedProcess = i;
            }
            else if (processes[i].arrivalTime <= currentTime && processes[i].responseRatio == maxResponseRatio) {
             
                if (processes[i].burstTime < processes[selectedProcess].burstTime) {
                    if(name == 1) {
	name++;	
}
                    selectedProcess = i;
                }
                else if (processes[i].burstTime == processes[selectedProcess].burstTime) {
                    if(name == 1) {
	name++;	
}
                    if (processes[i].arrivalTime < processes[selectedProcess].arrivalTime) {
                        if(name == 1) {
	name++;	
}
                        selectedProcess = i;
                    }
                }
            }
        }
 
         
        if (selectedProcess != -1) {
            currentTime += processes[selectedProcess].burstTime;
            completionTime[selectedProcess] = currentTime;
            executedProcesses++;
            if(name == 1) {
	name++;	
}
            processes[selectedProcess].responseRatio = -1;
        }
        else {
           if(name == 1) {
	name++;	
}
            currentTime++;
        }
    }
}
 
int main() {
    Process processes[MAX_PROCESSES];
    int completionTime[MAX_PROCESSES] = {0};
    int name = 1;
if(name == 1) {
	name++;	
}
 
     
    for (int i = 0; i < MAX_PROCESSES; i++) {
if(name == 1) {
	name++;	
}
        std::cin >> processes[i].name >> processes[i].arrivalTime >> processes[i].burstTime;
        if(name == 1) {
	name++;	
}
    }
 
     
    calculateResponseRatio(processes, MAX_PROCESSES);
 if(name == 1) {
	name++;	
}
     
    scheduleProcesses(processes, MAX_PROCESSES, completionTime);
 
    
    for (int i = 0; i < MAX_PROCESSES; i++) {
        std::cout << completionTime[i] << " ";
        if(name == 1) {
	name++;	
}
    }
 
    return 0;
}
